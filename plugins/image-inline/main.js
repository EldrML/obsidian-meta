
/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ImageToBase64Plugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/utils.ts
function arrayBufferToBase64(buffer) {
  let binary = "";
  const bytes = new Uint8Array(buffer);
  const len = bytes.byteLength;
  for (let i = 0; i < len; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return window.btoa(binary);
}
async function fileToBase64(file, vault) {
  const arrayBuffer = await vault.readBinary(file);
  return arrayBufferToBase64(arrayBuffer);
}
async function fetchRemoteImageToBase64(url) {
  const response = await fetch(url);
  const arrayBuffer = await response.arrayBuffer();
  return arrayBufferToBase64(arrayBuffer);
}

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  convertOnPaste: false,
  convertOnDrop: false
};
var ImageToBase64SettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Convert images on paste").setDesc("Automatically convert pasted images to base64 strings.").addToggle((toggle) => toggle.setValue(this.plugin.settings.convertOnPaste).onChange(async (value) => {
      this.plugin.settings.convertOnPaste = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Convert images on drop").setDesc("Automatically convert dropped images to base64 strings.").addToggle((toggle) => toggle.setValue(this.plugin.settings.convertOnDrop).onChange(async (value) => {
      this.plugin.settings.convertOnDrop = value;
      await this.plugin.saveSettings();
    }));
  }
};

// src/modal/convertAllModal.ts
var import_obsidian2 = require("obsidian");
var ConvertAllModal = class extends import_obsidian2.Modal {
  constructor(app, onConfirm) {
    super(app);
    this.skipInternalLinks = false;
    this.skipRemoteLinks = false;
    this.customFilters = [];
    this.forAllFiles = false;
    this.onConfirm = onConfirm;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Convert All Images to Base64" });
    contentEl.createEl("p", {
      text: "Do you want to convert all images to base64? You can also add filter schemes to skip certain images."
    });
    new import_obsidian2.Setting(contentEl).setName("Skip links starting with ![[xxx]]").addToggle(
      (toggle) => toggle.setValue(this.skipInternalLinks).onChange((value) => {
        this.skipInternalLinks = value;
      })
    );
    new import_obsidian2.Setting(contentEl).setName("Skip remote image links").addToggle(
      (toggle) => toggle.setValue(this.skipRemoteLinks).onChange((value) => {
        this.skipRemoteLinks = value;
      })
    );
    new import_obsidian2.Setting(contentEl).setName("Filter Schemes").setDesc(
      "Comma-separated list of keywords to skip (e.g., http, data)"
    ).addText(
      (text) => text.setPlaceholder("Enter filter schemes").onChange((value) => {
        this.customFilters = value.split(",").map((filter) => filter.trim());
      })
    );
    new import_obsidian2.Setting(contentEl).setName("For all files (Dangerous)").addToggle(
      (toggle) => toggle.setValue(this.forAllFiles).onChange((value) => {
        this.forAllFiles = value;
      })
    );
    new import_obsidian2.Setting(contentEl).addButton(
      (button) => button.setButtonText("Convert").setCta().onClick(() => {
        this.onConfirm({
          skipInternalLinks: this.skipInternalLinks,
          skipRemoteLinks: this.skipRemoteLinks,
          customFilters: this.customFilters,
          forAllFiles: this.forAllFiles
        });
        this.close();
      })
    ).addButton(
      (button) => button.setButtonText("Cancel").onClick(() => {
        this.close();
      })
    );
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
function shouldSkipImage(link, imagePath, filters) {
  if (filters.skipInternalLinks && link.startsWith("![[")) {
    return true;
  }
  if (filters.skipRemoteLinks && imagePath.startsWith("http")) {
    return true;
  }
  for (const filter of filters.customFilters) {
    if (filter.includes("*")) {
      const regex = new RegExp(filter.replace("*", ".*"));
      if (regex.test(imagePath)) {
        return true;
      }
    }
    if (link.includes(filter)) {
      return true;
    }
  }
  return false;
}

// src/main.ts
var ImageToBase64Plugin = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new ImageToBase64SettingTab(this.app, this));
    this.addCommand({
      id: "toggle-convert-on-paste",
      name: "Enable/disable convert to base64 on paste",
      callback: () => {
        this.settings.convertOnPaste = !this.settings.convertOnPaste;
        this.saveSettings();
        new import_obsidian3.Notice(
          `Convert on paste is now ${this.settings.convertOnPaste ? "enabled" : "disabled"}`
        );
      }
    });
    this.addCommand({
      id: "paste-image-as-base64",
      name: "Paste image as Base64",
      editorCallback: async (editor) => {
        navigator.clipboard.read().then(async (items) => {
          for (const clipboardItem of items) {
            for (const type of clipboardItem.types) {
              if (!(type.indexOf("image") === 0)) {
                continue;
              }
              const blob = await clipboardItem.getType(type);
              const arrayBuffer = await new Response(
                blob
              ).arrayBuffer();
              const base64 = arrayBufferToBase64(arrayBuffer);
              const cursor = editor.getCursor();
              const imgMarkdown = `![](data:image/jpeg;base64,${base64})
`;
              editor.replaceRange(imgMarkdown, cursor);
              const newCursorPos = {
                line: cursor.line,
                ch: imgMarkdown.length
              };
              editor.setCursor(newCursorPos);
            }
          }
        }).catch((err) => {
          console.error(
            "Failed to read clipboard contents: ",
            err
          );
          new import_obsidian3.Notice("Error accessing clipboard.");
        });
      }
    });
    this.addCommand({
      id: "convert-all-images-to-base64",
      name: "Convert all image attachments to inline base64",
      editorCallback: async (editor) => {
        new ConvertAllModal(
          this.app,
          async (filters) => {
            if (filters.forAllFiles) {
              var targetFiles = this.app.vault.getFiles().filter(
                (file) => file.extension === "md"
              );
              console.log("Converting " + targetFiles.length + " files");
            } else {
              const afile = this.app.workspace.getActiveFile();
              if (!afile)
                return;
              var targetFiles = [afile];
            }
            for (const file of targetFiles) {
              console.log("Converting file " + file.path);
              const content = await this.app.vault.read(file);
              const updatedContent = await this.convertAllImagesToBase64(
                content,
                file,
                filters
              );
              await this.app.vault.modify(file, updatedContent);
            }
            new import_obsidian3.Notice(
              "All image attachments have been converted to inline base64."
            );
          }
        ).open();
      }
    });
    this.registerEvent(
      this.app.workspace.on(
        "editor-paste",
        async (evt, editor) => {
          if (!(this.settings.convertOnPaste && evt.clipboardData)) {
            return;
          }
          const items = Array.from(evt.clipboardData.items);
          if (!items.some((item) => item.type.startsWith("image"))) {
            return;
          }
          evt.preventDefault();
          let cursor = editor.getCursor();
          items.forEach(async (item) => {
            if (item.type.startsWith("image")) {
              console.log("Detected " + item.type + " kind " + item.kind);
              const file = item.getAsFile();
              console.log("Converting file " + (file == null ? void 0 : file.name) + " to base64");
              if (file) {
                try {
                  const base64String = arrayBufferToBase64(
                    await (0, import_obsidian3.getBlobArrayBuffer)(file)
                  );
                  const imgMarkdown = `![](data:image/png;base64,${base64String})
`;
                  editor.replaceRange(imgMarkdown, cursor);
                  cursor = { line: cursor.line + 1, ch: 0 };
                  editor.setCursor(cursor);
                } catch (error) {
                  console.error("Error converting image to base64:", error);
                }
              }
            }
          });
        }
      )
    );
    this.registerDomEvent(document, "drop", async (event) => {
      var _a;
      if (!this.settings.convertOnDrop) {
        return;
      }
      const editor = (_a = this.app.workspace.activeEditor) == null ? void 0 : _a.editor;
      if (!editor) {
        console.log("No active editor found.");
        return;
      }
      event.preventDefault();
      event.stopPropagation();
      if (event.dataTransfer && event.dataTransfer.files.length > 0) {
        let cursor = editor.getCursor();
        console.log(`Initial cursor position: ${cursor.line}, ${cursor.ch}`);
        Array.from(event.dataTransfer.files).forEach(async (file, index) => {
          var _a2;
          console.log(`Processing file ${index + 1}/${(_a2 = event.dataTransfer) == null ? void 0 : _a2.files.length}: ${file.name} (${file.type})`);
          if (file.type.startsWith("image")) {
            const arrayBuffer = await file.arrayBuffer();
            const base64 = arrayBufferToBase64(arrayBuffer);
            const imgMarkdown = `![](data:image/${file.type.split("/")[1]};base64,${base64})
`;
            editor.replaceRange(imgMarkdown, cursor);
            cursor = { line: cursor.line + 1, ch: 0 };
            console.log(`New cursor position: ${cursor.line}, ${cursor.ch}`);
            editor.setCursor(cursor);
          }
        });
      }
    }, true);
  }
  async convertAllImagesToBase64(content, file, filters) {
    const imageLinks = content.match(
      /!\[.*?\]\(((?!data:).*?)\)|!\[\[([^\]]+?)\]\]/g
    );
    if (!imageLinks)
      return content;
    for (const link of imageLinks) {
      let match = link.match(/!\[.*?\]\((.*?)\)/) || link.match(/!\[\[([^\]]+?)\]\]/);
      if (!match)
        continue;
      const imagePath = match[1] || match[2];
      if (shouldSkipImage(link, imagePath, filters)) {
        continue;
      }
      let base64;
      if (imagePath.startsWith("http")) {
        try {
          base64 = await fetchRemoteImageToBase64(imagePath);
        } catch (error) {
          console.error("Error fetching remote image:", error);
          continue;
        }
      } else {
        const imageFile = this.app.metadataCache.getFirstLinkpathDest(
          imagePath,
          file.path
        );
        if (!imageFile)
          continue;
        base64 = await fileToBase64(imageFile, this.app.vault);
      }
      const dataUrl = `data:image/png;base64,${base64}`;
      content = content.replace(link, `![](${dataUrl})`);
    }
    return content;
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
